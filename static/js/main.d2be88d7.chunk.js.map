{"version":3,"sources":["HomePage.tsx","Actions.tsx","PlayPage.tsx","NavBar.tsx","AppNav.tsx","Reducers.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["HomePage","style","textAlign","className","role","href","Component","setHighScore","key","type","payload","keyMap","continue","select1","select2","select3","select4","select5","select6","select7","select8","select9","select10","select11","select12","select13","select14","select15","select16","select17","select18","select19","select20","select21","PlayPage","props","selectRandomNumbers","number","state","rows","randomIndeces","i","random","Math","floor","dogs","length","push","j","fetchAllDogs","a","async","fetch","req","json","res","message","Object","keys","setState","fetchDogImages","dogImages","borderColors","dogImage","selectedDogIndex","selectedBreedName","showContinue","printDogImages","images","Row","map","item","index","Col","toString","md","marginBottom","onLoad","loading","onClick","selectImage","width","height","src","alt","cursor","borderWidth","borderRadius","borderStyle","borderColor","selected","rounds","score","streak","highscore","setTimeout","printScore","marginRight","toFixed","toUpperCase","substring","fontSize","help","randomnumbers","continueButton","Button","handlers","obj","entries","str","this","Container","Spinner","animation","connect","dispatch","bindActionCreators","NavBar","Navbar","backgroundColor","fixed","Brand","Nav","Text","AppNav","paddingBottom","exact","path","component","INITIAL_STATE_LOGIN","localStorage","getItem","parseInt","store","createStore","combineReducers","action","setItem","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2be88d7.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass HomePage extends Component<{}, {}> {\n\n   render() {\n      return (\n         <div style={{textAlign: 'center'}}>\n            <div className=\"cover-container d-flex h-100 mx-auto flex-column\">\n               <main role=\"main\" className=\"inner cover\">\n                  <h2 className=\"cover-heading\">Welcome to The Dog Breed Game!</h2>\n                  <p className=\"lead\">The Dog Breed Game is a guessing game where you guess the image of the dog brand.</p>\n                  <p className=\"lead\">\n                     <a href=\"/play\" className=\"btn btn-lg btn-outline-success\">Click to start playing!</a>\n                  </p>\n               </main>\n            </div>\n         </div>\n      );\n   }\n}\n\n\nexport default HomePage;","\nexport interface HighScore {\n   score: number\n}\n \nexport const setHighScore = (key: number) => (\n     {\n       type: 'SET_HIGHSCORE',\n       payload: key\n     }\n );\n","import React, { Component } from 'react'\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col'\nimport Spinner from 'react-bootstrap/Spinner';\nimport Button from 'react-bootstrap/Button';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { GlobalHotKeys } from 'react-hotkeys';\nimport { HighScore, setHighScore } from './Actions';\n\n\ninterface State {\n   dogs: Array<string>,\n   dogImages: Array<string>,\n   score: number,\n   rounds: number,\n   streak: number,\n   rows: number,\n   loading: boolean,\n   randomIndeces: Array<number>,\n   borderColors: Array<string>,\n   selectedBreedName: string,\n   showContinue: boolean,\n   selectedDogIndex: number,\n   selected: boolean\n}\n\ninterface Props {\n   highscore: { score: number },\n   setHighScore: (arg: number) => void\n}\n\ninterface LooseObject {\n   [key: string]: any\n}\n\nconst keyMap: LooseObject = {        //Total hotkeys available\n   continue: \"enter\",\n   select1: \"1\",\n   select2: \"2\",\n   select3: \"3\",\n   select4: \"4\",\n   select5: \"5\",\n   select6: \"6\",\n   select7: \"7\",\n   select8: \"8\",\n   select9: \"9\",\n   select10: \"0\",\n   select11: \"q\",\n   select12: \"w\",\n   select13: \"e\",\n   select14: \"r\",\n   select15: \"t\",\n   select16: \"y\",\n   select17: \"u\",\n   select18: \"i\",\n   select19: \"o\",\n   select20: \"p\",\n   select21: \"a\"\n};\n\nclass PlayPage extends Component<Props, State> {\n\n\n   constructor(props: Props) {\n      super(props);\n      this.state = {\n         dogs: [],\n         selectedDogIndex: 0,\n         selected: false,\n         score: 0,\n         rows: 0,\n         loading: true,\n         rounds: 0,\n         streak: 0,\n         selectedBreedName: '',\n         showContinue: false,\n         borderColors: [],\n         dogImages: [],\n         randomIndeces: []\n      }\n   }\n\n   async componentDidMount() {\n      //Get all dogs from the api\n      await this.fetchAllDogs();\n      //Select the required number of random numbers\n      let randomnumbers = this.selectRandomNumbers();\n      //Fetch the dog images from the api\n      await this.fetchDogImages(randomnumbers.randomIndeces);\n   }\n\n   selectRandomNumbers = () => {\n      let number = 3 + this.state.rows * 3;\n      let randomIndeces = []\n      for (let i = 0; i < number; i++) {\n         let random = Math.floor(Math.random() * this.state.dogs.length);      //Select a random number between 0 to the last element of the dogs array \n         let push = true;\n         if (random >= this.state.dogs.length) {    //If the index exceeds the arrays length, reiterate\n            i--;\n            push = false;\n         }\n         for (let j = 0; j < randomIndeces.length; j++) {\n            if (randomIndeces[j] === random || random >= this.state.dogs.length) {    //If the index is the same, do not add it\n               i--;\n               push = false;\n            }\n         }\n         if (push)\n            randomIndeces.push(random);\n      }\n      return { randomIndeces };\n   }\n\n   fetchAllDogs = async () => {\n      let req = await fetch('https://dog.ceo/api/breeds/list/all');  //Fetch all dogs from the api\n      let res = await req.json();      //Get the result's json\n      let dogs = res.message;          //Get the message from the api's response which contains the list of the dogs as an object\n      dogs = Object.keys(res.message)     //Convert the object's key values into an array since the key values contain the dog names\n      this.setState({ dogs })\n   }\n\n   fetchDogImages = async (randomIndeces: Array<number>) => {\n      let dogImages: Array<string> = [];\n      let borderColors: Array<string> = [];\n      for (let i = 0; i < randomIndeces.length; i++) {      //Fetch the dog images using the random indeces\n         let req = await fetch('https://dog.ceo/api/breed/' + this.state.dogs[randomIndeces[i]] + '/images/random');\n         let res = await req.json();\n         let dogImage = res.message;\n         dogImages.push(dogImage)\n         borderColors.push('');\n      }\n      let selectedDogIndex = Math.floor(Math.random() * randomIndeces.length);\n      let selectedBreedName = this.state.dogs[randomIndeces[selectedDogIndex]];\n      let showContinue = false;     //Do not show the continue button while loading\n      this.setState({ dogImages, borderColors, selectedDogIndex, selectedBreedName, showContinue })\n   }\n\n   printDogImages = (images: Array<string>) => {      //The component to print the dog images\n      return (\n         <Row >{\n            images.map((item, index) => {\n               return (\n                  <Col key={index.toString()} md={4} style={{ marginBottom: '1.5rem', textAlign: 'center' }}>\n                     <img\n                        onLoad={() => {\n                           let loading = false;\n                           this.setState({ loading });\n                        }}\n                        onClick={() => {\n                           this.selectImage(index);\n                        }} className=\"img-responsive\" width={200} height={200} src={item} alt=\"dog\" style={this.state.borderColors[index] === '' ? { cursor: 'pointer' } : { borderWidth: 6, borderRadius: 12, borderStyle: 'solid', borderColor: this.state.borderColors[index] }} />\n                     {/*index === this.state.selectedDogIndex ? <p>Selected</p> : <></>*/}\n                  </Col>\n               )\n            })}\n         </Row>\n      )\n   }\n\n   selectImage = (index: number) => {\n      if (index > this.state.dogImages.length)\n         return;\n      if (!this.state.selected) {\n         let rounds = this.state.rounds + 1;    //Update rounds played\n         if (this.state.selectedDogIndex === index) {         //If answer if correct\n            let borderColors = [...this.state.borderColors];\n            borderColors[index] = '#00ff00';       //Make selected image's border green\n            let selected = true;             //Stop user from selecting another image\n            let score = this.state.score + 1;    //Update score\n            let streak = this.state.streak + 1;\n            let highscore = this.props.highscore.score;\n            if (highscore < score)\n               this.props.setHighScore(score);\n            let rows = this.state.rows;\n            if (streak % 5 === 0) {\n               rows++;\n            }\n            this.setState({ borderColors, selected, rounds, score, streak, rows }, () => {\n               setTimeout(() => {\n                  this.continue();\n               }, 1000)\n            })\n         }\n         else {\n            let borderColors = [...this.state.borderColors];\n            borderColors[index] = '#ff0000';       //Make selected image's border red\n            borderColors[this.state.selectedDogIndex] = '#00ff00';   //Make selected image's border green\n            let selected = true;          //Stop user from selecting another image\n            let streak = 0;\n            let showContinue = true;\n            this.setState({ borderColors, selected, rounds, streak, showContinue })\n         }\n      }\n   }\n\n   printScore = () => {\n      return (\n         <Col className=\"mb-2\">\n            <Row className=\"justify-content-center\">\n               <h6 style={{ marginRight: '1rem' }}>\n                  Score: {this.state.score}\n               </h6>\n               <h6>\n                  Streak: {this.state.streak}\n               </h6>\n            </Row>\n            <Row className=\"justify-content-center\">\n            </Row>\n            <Row className=\"justify-content-center\">\n               <h6>\n                  Accuracy: {this.state.rounds === 0 ? 0 : (this.state.score / this.state.rounds * 100).toFixed(0)}%\n               </h6>\n            </Row>\n            {this.state.loading ?\n               <></>\n               :\n               <>\n                  <Row className=\"justify-content-center\">\n                     <h6>\n                        Breed: {this.state.selectedBreedName[0].toUpperCase() + this.state.selectedBreedName.substring(1)}\n                     </h6>\n                  </Row>\n                  <Row className=\"justify-content-center\">\n                     <p style={{ fontSize: '1.2rem' }} className=\"lead\">\n                        {this.help()}\n                     </p>\n                  </Row>\n               </>\n            }\n         </Col>\n      );\n   }\n\n   continue = () => {\n      this.setState({ loading: true, selected: false, dogImages: [] }, async () => {\n         //Select the required number of random numbers\n         let randomnumbers = this.selectRandomNumbers();\n         //Fetch the dog images from the api\n         await this.fetchDogImages(randomnumbers.randomIndeces);\n      });\n   }\n\n   continueButton = () => {\n      return (\n         <Row style={{ marginBottom: '2rem' }}>\n            <Col style={{ textAlign: 'center' }}>\n               <Button onClick={() => {\n                  this.continue()\n               }}>Continue</Button>\n            </Col>\n         </Row>\n      )\n   }\n\n\n   handlers = () => {            //Dynamically create the hotkey handlers \n      let obj: LooseObject = {\n         continue: () => {\n            if(this.state.selected)\n               this.continue()\n         }\n      };\n      for (let i = 1; i <= Object.entries(keyMap).length; i++) {\n         obj[\"select\" + (i).toString()] = () => this.selectImage(i - 1);\n      }\n      return obj;\n   }\n\n   help = () => {\n      let str = \"Press \";\n      for (let i = 1; i <= this.state.dogImages.length; i++) {\n         str += keyMap[\"select\" + i.toString()] + (i !== this.state.dogImages.length ? \", \" : \"\");\n      }\n      str += \" to use hotkeys!\";\n      return str;\n   }\n\n   render() {\n      return (\n         <Container>\n            <GlobalHotKeys keyMap={keyMap} handlers={this.handlers()} />\n            {this.printScore()}\n            {this.state.showContinue && !this.state.loading ? this.continueButton() : <></>}\n            {\n               this.state.loading ?\n                  <Container className=\"text-center\">\n                     <Spinner animation=\"border\" />\n                  </Container>\n                  :\n                  <></>\n            }\n            {this.printDogImages(this.state.dogImages)}\n         </Container>\n      )\n   }\n}\n\ninterface StateRedux {\n   highscore: HighScore\n}\n\nconst mapStateToProps = (state: StateRedux) => {\n   const { highscore } = state;\n   return { highscore };\n};\n\nconst mapDispatchToProps = (dispatch: any) => (\n   bindActionCreators({\n      setHighScore\n   }, dispatch)\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayPage);","import React, { Component } from 'react'\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { HighScore } from './Actions';\n\n\ninterface Props{\n    highscore: {score: number}\n}\n\nclass NavBar extends Component<Props, {}> {\n\n    render() {\n        return (\n            <Navbar style={{ backgroundColor: 'rgb(240, 240, 255)' }} className=\"justify-content-between pl-4 pr-4\" fixed=\"top\">\n                <Navbar.Brand href=\"/\">\n                    Dog Breed Game\n                </Navbar.Brand>\n                <Nav>\n                    <Navbar.Text>\n                        High Score: {this.props.highscore.score}\n                    </Navbar.Text>\n                </Nav>\n            </Navbar>\n        );\n    }\n}\n\n\ninterface StateRedux {\n    highscore: HighScore\n}\n\nconst mapStateToProps = (state: StateRedux) => {\n    const { highscore } = state;\n    return { highscore };\n};\n\nconst mapDispatchToProps = (dispatch: any) => (\n    bindActionCreators({\n\n    }, dispatch)\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);","import React, { Component } from 'react'\nimport { Route, BrowserRouter, Switch } from 'react-router-dom';\nimport HomePage from './HomePage';\nimport PlayPage from './PlayPage';\nimport NavBar from './NavBar';\n\n//Navigator page where the routes are set\nclass AppNav extends Component {\n\n   render() {\n      return (\n         <BrowserRouter>\n            <div style={{ paddingBottom: '4.5rem' }}>\n               <NavBar />\n            </div>\n            <Switch>\n               <Route exact path=\"/\" component={HomePage} />\n               <Route path='/play' component={PlayPage} />\n            </Switch>\n         </BrowserRouter>\n      )\n   }\n}\n\n\nexport default AppNav;","import { createStore, combineReducers } from 'redux'\nimport {HighScore} from './Actions';\n\ninterface ActionHighScore{\n   payload: {score: number},\n   type: string\n}\n\nlet INITIAL_STATE_LOGIN = {\n   score: localStorage.getItem('score') ? parseInt(localStorage.getItem('score')!) : 0,\n} as HighScore\n\nlet highscoreReducer = (state = INITIAL_STATE_LOGIN, action: ActionHighScore) => {\n  switch (action.type) {\n    case 'SET_HIGHSCORE':\n      localStorage.setItem('score', action.payload.toString());\n      return { score: action.payload};   //Throws error since userid is stored as an integer\n    default:\n      return state;\n  }\n}\n\n\nexport const store = createStore(combineReducers({highscore: highscoreReducer} as any));\n\n//store.dispatch(setLogin({username: 'test', password: '1', firstname: 'ali', lastname: 'veli', email: 'a@a.com'}))\n","import React, { Component } from 'react';\nimport './App.css';\nimport AppNav from './AppNav';\nimport {store} from './Reducers';\nimport { Provider } from 'react-redux'\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Provider store={store}>\n        <AppNav/>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}